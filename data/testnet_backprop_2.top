#Learning Rate (traditionally betweek 0.01 -> 0.1
0.5

# Network Loss Function:
## Options:
### Regression Problem - Mean Squared Error (MSE): 
#### Predicting a real value quantity - One output node with linear activation unit
### Binary Classification Problem - Cross Entropy/Logarithmic Loss (CE):
#### Likelihood of example belong to one of two classes, one output node with sigmoid. One class is 1, other is 0
### Multi-Class Classification Problem - Cross Entropy/Logarithmic Loss (CE):
#### Predicting likelihood of example belonging to each class, One node for each class with Softmax activation function
[SOS]

##--------------- How many Layers in network ---------------
# Layer_Count:
4


##--------------- How many Nodes per layer -----------------
##----- Ranndom number of nodes
##----- Only set input and output layer node count

#Random_nodes_per_layer (0 - false, 1 - true):
0
#Random_Range_Min:
2
#Random_Range_Max:
4
#Input and output layer node count (for random)
[2,5]

##----- Manual set node count
# Nodes_Per_Layer (if Random_Nodes_Per_Layer is 0):
[3,3,3,3]


##--------------- Which activation function for layer ------
#Layer_Actv_Funcs:
[Null,Relu,Sigmoid,Softmax]


##--------------- Set initial weight matricies for layer ---
##----- Assign random initial weights
#Random_Weights (0 - false, 1 - true, 2 - all ones):
0
#Random_Range_Min:
-0.999999
#Random_Range_Max:
0.999999

##----- Manually assign initial weights
[0.1, 0.2, 0.3
0.3, 0.2, 0.7
0.4, 0.3, 0.9]

[0.2, 0.3, 0.5
0.3, 0.5, 0.7
0.6, 0.4, 0.8]

[0.1, 0.4, 0.8
0.3, 0.7, 0.2
0.5, 0.2, 0.9]




