#include "Platform/Platform.hpp"

using namespace std;

int main()
{
	double win_x = 2560;
	double win_y = 1440;

	util::Platform platform;

	// Create new window object
	sf::RenderWindow window;
	// in Windows at least, this must be called before creating the window
	float screenScalingFactor = platform.getScreenScalingFactor(window.getSystemHandle());

	// Use the screenScalingFactor and create window
	window.create(sf::VideoMode(win_x * screenScalingFactor, win_y * screenScalingFactor), "SFML is GAY... and works!");
	platform.setIcon(window.getSystemHandle());

	/*
	// Draw rect in center
	sf::RectangleShape shape(sf::Vector2f(600, 400));
	shape.setFillColor(sf::Color::Green);
	shape.setPosition(win_x / 2 - (shape.getSize().x / 2), win_y / 2 - (shape.getSize().y / 2));
	*/
	/*
	// Define circle shape for testing
	sf::CircleShape shape((window.getSize().x) / 2);
	shape.setFillColor(sf::Color::White);
	*/
	/*
	// Define texture for drawing
	sf::Texture shapeTexture;
	shapeTexture.loadFromFile("content/sfml.png");
	shape.setTexture(&shapeTexture);
	*/
	/*
	// Create font and text objects
	sf::Text text;
	sf::Font font;

	// Load font from file
	if (!font.loadFromFile("fonts/akira.otf")){
		cout << "FONT ERROR!\n";
		exit(EXIT_FAILURE);
	}

	// Set font attributes
	text.setFont(font);
	text.setString("I SUCK ASS");
	text.setCharacterSize(50);
	text.setFillColor(sf::Color::White);
	text.setStyle(sf::Text::Bold | sf::Text::Underlined);
	text.setPosition(win_x / 2 - (text.getGlobalBounds().width/2) , win_y / 10);
*/

	// Create object for holding event
	sf::Event event;

	// While window is open, get current event (monitor for closed)
	while (window.isOpen())
	{
		while (window.pollEvent(event))
		{
			// If close event is dectected, exit
			if (event.type == sf::Event::Closed)
				window.close();
		}

		// Clear the window, draw shape to buffer, display window
		window.clear();
		//window.draw(shape);
		window.display();
	}

	return 0;
}
